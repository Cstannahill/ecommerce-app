generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String? // store your bcrypt hash here

  role UserRole @default(USER)

  // NextAuth relations
  accounts Account[]
  sessions Session[]

  // Your own relation
  orders Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Product {
  id          String      @id @default(cuid())
  title       String
  description String
  imageUrl    String
  price       Int // cents
  category    String
  type        ProductType
  fileKey     String? // S3 key when digital
  weightOz    Int? // for shipping
  stock       Int? // null for digital
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  orderItems  OrderItem[]
}

enum ProductType {
  DIGITAL
  PHYSICAL
}

model Order {
  id        String      @id @default(cuid())
  email     String
  stripeId  String      @unique
  amount    Int
  status    OrderStatus
  createdAt DateTime    @default(now())
  items     OrderItem[]
  User      User?       @relation(fields: [userId], references: [id])
  userId    String?
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
}

model OrderItem {
  id        String  @id @default(cuid())
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
  productId String
  quantity  Int
  product   Product @relation(fields: [productId], references: [id])
}
